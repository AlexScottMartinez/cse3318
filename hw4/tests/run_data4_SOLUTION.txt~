compile:
gcc merge_k_client.c merge_k_sol.c list.c
run:
valgrind --leak-check=full ./a.out
==300== Memcheck, a memory error detector
==300== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==300== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==300== Command: ./a.out
==300==
==300== error calling PR_SET_PTRACER, vgdb might block
Enter a filename: data4.txt
Reading 4 lists in the format: list size (N) and then N integers
 List items:    3                1                9                0                16
 List pointers: 0x5231370        0x52313c0        0x5231410        0x5231460        0x52314b0
 Length of above list = 5

 List items:    20               22               27
 List pointers: 0x5231500        0x5231550        0x52315a0
 Length of above list = 3

 List items:    9                12               0                78               5                9                4
 List pointers: 0x52315f0        0x5231640        0x5231690        0x52316e0        0x5231730        0x5231780        0x52317d0
 Length of above list = 7

 List items:    8
 List pointers: 0x5231820
 Length of above list = 1


Sorting each linked list:

 List items:    3                1                9                0                16
 List pointers: 0x5231370        0x52313c0        0x5231410        0x5231460        0x52314b0
 Length of above list = 5
Sorted list:
 List items:    0                1                3                9                16
 List pointers: 0x5231460        0x52313c0        0x5231370        0x5231410        0x52314b0
 Length of above list = 5

 List items:    20               22               27
 List pointers: 0x5231500        0x5231550        0x52315a0
 Length of above list = 3
Sorted list:
 List items:    20               22               27
 List pointers: 0x5231500        0x5231550        0x52315a0
 Length of above list = 3

 List items:    9                12               0                78               5                9                4
 List pointers: 0x52315f0        0x5231640        0x5231690        0x52316e0        0x5231730        0x5231780        0x52317d0
 Length of above list = 7
Sorted list:
 List items:    0                4                5                9                9                12               78
 List pointers: 0x5231690        0x52317d0        0x5231730        0x52315f0        0x5231780        0x5231640        0x52316e0
 Length of above list = 7

 List items:    8
 List pointers: 0x5231820
 Length of above list = 1
Sorted list:
 List items:    8
 List pointers: 0x5231820
 Length of above list = 1

Constructing the Heap (turns the array into a heap using bottom up) ...
==300==
==300== HEAP SUMMARY:
==300==     in use at exit: 0 bytes in 0 blocks
==300==   total heap usage: 20 allocs, 20 frees, 13,096 bytes allocated
==300==
==300== All heap blocks were freed -- no leaks are possible
==300==
==300== For lists of detected and suppressed errors, rerun with: -s
==300== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
